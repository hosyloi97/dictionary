/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mrloiho.hust.design;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import mrloiho.hust.file_io.FileIO;
import static mrloiho.hust.file_io.FileIO.checkType;

/**
 *
 * @author Mr Loi Ho
 */
public class Dictionary extends javax.swing.JFrame {

    private static ArrayList<mrloiho.hust.model.Dictionary> listDics = new ArrayList<mrloiho.hust.model.Dictionary>();
    static String dirName = "F://PROJECT/EasyDictionary/Eng-Vie_database.txt";

    /**
     * Creates new form Dictionary
     */
    public Dictionary() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameDictionary = new javax.swing.JLabel();
        inputText = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listWords = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        nameDictionary.setFont(new java.awt.Font("Palatino Linotype", 3, 18)); // NOI18N
        nameDictionary.setText("Eng- Vie Dictionary");

        inputText.setFont(new java.awt.Font("Palatino Linotype", 2, 14)); // NOI18N
        inputText.setForeground(new java.awt.Color(153, 153, 153));
        inputText.setText("Input text here...");
        inputText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputTextFocusLost(evt);
            }
        });
        inputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextActionPerformed(evt);
            }
        });

        search.setFont(new java.awt.Font("Palatino Linotype", 3, 14)); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        listWords.setFont(new java.awt.Font("Palatino Linotype", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(listWords);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 272, Short.MAX_VALUE)
                .addComponent(nameDictionary)
                .addGap(248, 248, 248))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nameDictionary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputTextFocusGained
        // clear text field if the text is "Input here..."
        if (inputText.getText().trim().equals("")) {
            inputText.setText("");
            inputText.setForeground(Color.black);
        }
    }//GEN-LAST:event_inputTextFocusGained

    private void inputTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputTextFocusLost
        // if the inputText has nothing
        //        we will set default is "Input text here!"
        if (inputText.getText().trim().equals("")) {
            inputText.setText("Input text here...");
            inputText.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_inputTextFocusLost

    private void inputTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextActionPerformed
        // TODO add your handling code here:
        //        String inputString= new String();
        inputText.setText(inputText.getText());
    }//GEN-LAST:event_inputTextActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, inputText);
    }//GEN-LAST:event_searchActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        listModel = new DefaultListModel<String>();
        listWords.setModel(listModel);
        for(int i=0; i<listDics.size();i++){
            listModel.addElement(listDics.get(i).getWordOrigin());
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*read File from input data "dirName"*/
        listDics = FileIO.readFile(dirName);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dictionary().setVisible(true);
            }
        });
    }
//     public static String testInput(String line) {
//        mrloiho.hust.model.Dictionary d = new mrloiho.hust.model.Dictionary();
//        int index = 0;
//        String temp = new String();
//        if ((index = line.indexOf("##")) >= 0) {
//            d.setWordOrigin(line.substring(0, index).trim());
//            line = line.substring(index + 2, line.length()).trim();
//        }
//        if ((index = line.indexOf("#*")) >= 0) {
//            d.setWordSpelling(line.substring(0, index).trim());
//            line = line.substring(index + 2, line.length()).trim();
//        }
//
//        if (checkType(line)) {
//            index = line.indexOf("|-");
//            temp = line.substring(0, index).trim();
//            line = line.substring(index, line.length()).trim();
//            d.setWordType(temp);
//        }
//        while (!line.isEmpty()) {
//            if ((index = line.indexOf("|-")) >= 0) {
//                int newIndex = line.indexOf(";");
//                if (newIndex >= 0) {
//                    temp = line.substring(2, newIndex);
//                    line = line.substring(newIndex + 1, line.length());
//                    d.wordMeans.add(temp);
//                }
//                else {
//                temp = line.substring(2, line.length()).trim();
//                d.wordMeans.add(temp);
//                line = "";
//            }
//             } else {
//                temp = line.substring(0, line.length()).trim();
//                d.wordMeans.add(temp);
//                line = "";
//            }
//        }
//        return "import data done";
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JList<String> listWords;
    private javax.swing.JLabel nameDictionary;
    private javax.swing.JButton search;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel<String> listModel;

}
